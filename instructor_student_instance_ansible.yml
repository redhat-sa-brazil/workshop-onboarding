- name: Cria instancias Gcloud Openshift para Workshop
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    machine_type_node: n1-standard-1
    machine_type_small: g1-small
    zone: us-east1-b
    region: us-east1
    image: centos-7
    preemptible: false
    tamanho_disco_pequeno: 40
    tamanho_disco_grande: 50
    tamanho_disco_adicional: 50
    master_private_ip: ""
    infranode_private_ip: ""
    node1_private_ip: ""
    machine_type_node_aws: t2.xlarge
    machine_type_node_aws_small: t2.micro   
    region_aws: sa-east-1
    image_aws:   ami-cb5803a7
    pwd_alias: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"

  tasks:

  - name: Carregando variaveis de config.yml
    include_vars: config.yml

# ========================================
# GCE
# ========================================

  - name: "Cria Disco 1 instancia {{ user }}"
    gce_pd:
      name: "{{ user }}-a-disk01"
      image: "{{ image }}"
      size_gb: "{{ tamanho_disco_pequeno }}"
      zone: "{{ zone  }}"
      service_account_email: "{{ service_account_email }}"
      credentials_file: "{{ credentials_file }}"
      project_id: "{{ project_id }}"
    when: provider == "gce" and create_student_instance == "S"

  - name: "Cria Disco 1 instancia {{ user }}-server1"
    gce_pd:
      name: "{{ user }}-a-disk02"
      image: "{{ image }}"
      size_gb: "{{ tamanho_disco_pequeno }}"
      zone: "{{ zone  }}"
      service_account_email: "{{ service_account_email }}"
      credentials_file: "{{ credentials_file }}"
      project_id: "{{ project_id }}"
    when: provider == "gce" and create_student_instance == "S"

  - name: "Cria Disco 1 instancia {{ user }}-server2"
    gce_pd:
      name: "{{ user }}-a-disk03"
      image: "{{ image }}"
      size_gb: "{{ tamanho_disco_pequeno }}"
      zone: "{{ zone  }}"
      service_account_email: "{{ service_account_email }}"
      credentials_file: "{{ credentials_file }}"
      project_id: "{{ project_id }}"
    when: provider == "gce" and create_student_instance == "S"

  - name: "Cria ip estatico {{ user }}"
    gce_eip:
     service_account_email: "{{ service_account_email }}"
     credentials_file: "{{ credentials_file }}"
     project_id: "{{ project_id }}"
     name: "ip-{{ user }}"
     region: "{{ region }}"
     state: present
    when: provider == "gce" and create_student_instance == "S"


  - name: "Cria Instancia {{ user }}"
    gce:
        instance_names: "{{ user }}"
        machine_type: "{{ machine_type_node }}"
        image: "{{ image }}"
        zone: "{{ zone }}"
        preemptible: "{{ preemptible }}"
        tags:
         - http-server
         - https-server
        service_account_email: "{{ service_account_email }}"
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        metadata: '{"sshKeys":"workshop:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKuZ7MSrvu0nYOQc+w6H1lYnfkDKctaYON5WPYdKuj8KUIaM135Aj7NK857+gvDzi8GAAjWCWx0BuHP6muuDHQD2k1oH5T5kOrXoExtIo0TXwwgeHNiuFLPRKfYL5ACWou0RMd8dvqe9g9jmc9Pu+Omzct4qG/6z/s1UX2hwzw0sGIkIUaH133IP+v9iIWiqMBZZe6GzZZOEx70uEdGumCwsVAKK18WIF1BklcrUG1wrQ69LDhuKP0zzE2mwKiDqUhaa4VLaGULP0kz/PAoZx/wrJSftKwM5oqLoV9kd/YbE01YXOYeEP4cWecBbLacWrNwrZgn6fBMpnZ6TOquMff"}'
        disks:
        - name: "{{ user }}-a-disk01"
          mode: READ_WRITE
    register: gce_node
    when: provider == "gce" and create_student_instance == "S"

  - name: "Cria Instancia {{ user }}-server1"
    gce:
        instance_names: "{{ user }}-server1"
        machine_type: "{{ machine_type_small }}"
        image: "{{ image }}"
        zone: "{{ zone }}"
        
        preemptible: "{{ preemptible }}"
        tags:
         - http-server
         - https-server
        service_account_email: "{{ service_account_email }}"
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        metadata: '{"sshKeys":"workshop:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKuZ7MSrvu0nYOQc+w6H1lYnfkDKctaYON5WPYdKuj8KUIaM135Aj7NK857+gvDzi8GAAjWCWx0BuHP6muuDHQD2k1oH5T5kOrXoExtIo0TXwwgeHNiuFLPRKfYL5ACWou0RMd8dvqe9g9jmc9Pu+Omzct4qG/6z/s1UX2hwzw0sGIkIUaH133IP+v9iIWiqMBZZe6GzZZOEx70uEdGumCwsVAKK18WIF1BklcrUG1wrQ69LDhuKP0zzE2mwKiDqUhaa4VLaGULP0kz/PAoZx/wrJSftKwM5oqLoV9kd/YbE01YXOYeEP4cWecBbLacWrNwrZgn6fBMpnZ6TOquMff"}'
        disks:
        - name: "{{ user }}-a-disk02"
          mode: READ_WRITE
    register: gce1
    when: provider == "gce" and create_student_instance == "S"

  - name: "Cria Instancia {{ user }}-server2"
    gce:
        instance_names: "{{ user }}-server2"
        machine_type: "{{ machine_type_small }}"
        image: "{{ image }}"
        zone: "{{ zone }}"
        
        preemptible: "{{ preemptible }}"
        tags:
         - http-server
         - https-server
        service_account_email: "{{ service_account_email }}"
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        metadata: '{"sshKeys":"workshop:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKuZ7MSrvu0nYOQc+w6H1lYnfkDKctaYON5WPYdKuj8KUIaM135Aj7NK857+gvDzi8GAAjWCWx0BuHP6muuDHQD2k1oH5T5kOrXoExtIo0TXwwgeHNiuFLPRKfYL5ACWou0RMd8dvqe9g9jmc9Pu+Omzct4qG/6z/s1UX2hwzw0sGIkIUaH133IP+v9iIWiqMBZZe6GzZZOEx70uEdGumCwsVAKK18WIF1BklcrUG1wrQ69LDhuKP0zzE2mwKiDqUhaa4VLaGULP0kz/PAoZx/wrJSftKwM5oqLoV9kd/YbE01YXOYeEP4cWecBbLacWrNwrZgn6fBMpnZ6TOquMff"}'
        disks:
        - name: "{{ user }}-a-disk03"
          mode: READ_WRITE
    register: gce2
    when: provider == "gce" and create_student_instance == "S"

  - name: Salva dados no grupo de inventario... usuario
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: instances_ips
    with_items: "{{ gce_node.instance_data }}"
    when: provider == "gce" and create_student_instance == "S"

  - name: Grava IP da instancia na variavel ip_publico
    set_fact:
      ip_publico: "{{ item.public_ip }}"
    with_items: "{{ gce_node.instance_data }}"
    when: provider == "gce" and create_student_instance == "S"

  - name: Grava IP da instancia server-1 
    set_fact:
      ip_server1: "{{ user }}-server1"
    with_items: "{{ gce1.instance_data }}"
    when: provider == "gce" and create_student_instance == "S"

  - name: Grava IP da instancia server-2
    set_fact:
      ip_server2: "{{ user }}-server2"
    with_items: "{{ gce2.instance_data }}"
    when: provider == "gce" and create_student_instance == "S"


  - name: Espera por SSH habilitado...
    wait_for:
      delay: 1
      host: "{{ item.public_ip }}"
      port: 22
      state: started
      timeout: 30
    with_items: "{{ gce_node.instance_data }}"
    when: provider == "gce" and create_student_instance == "S"

# ========================================
# FIM GCE
# ========================================

# ========================================
# AWS
# ========================================
  - name: Gera id randomico para Instancia
    set_fact:
     id_rand: "{{ pwd_alias }}"

  - name: Cria Instancia Aluno 
    ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         key_name: "{{ aws_key_name }}"
         group: "default"
         instance_type: "{{ machine_type_node_aws }}"
         image: "{{ image_aws }}"
         wait: true
         region: "{{ region_aws }}"
         vpc_subnet_id: "{{ aws_subnet_id }}"
         id: "{{ id_rand }}"
         assign_public_ip: yes
         instance_tags: 
           Name: "{{ user }}"
         volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 40
    register: ec2
    when: provider == "aws" and create_student_instance == "S"

  - name: Cria Instancia Aluno 2
    ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         key_name: "{{ aws_key_name }}"
         group: "default"
         instance_type: "{{ machine_type_node_aws_small }}"
         image: "{{ image_aws }}"
         wait: true
         region: "{{ region_aws }}"
         vpc_subnet_id: "{{ aws_subnet_id }}"
         assign_public_ip: yes
         instance_tags: 
           Name: "{{ user }}-server1"
         volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 40
    register: aws1
    when: provider == "aws" and create_student_instance == "S"

  - name: Cria Instancia Aluno 3
    ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         key_name: "{{ aws_key_name }}"
         group: "default"
         instance_type: "{{ machine_type_node_aws_small }}"
         image: "{{ image_aws }}"
         wait: true
         region: "{{ region_aws }}"
         vpc_subnet_id: "{{ aws_subnet_id }}"
         assign_public_ip: yes
         instance_tags: 
           Name: "{{ user }}-server2"
         volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 40
    register: aws2
    when: provider == "aws" and create_student_instance == "S"

  - name: Cria regras de firewall
    ec2_group:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      name: regrasopenshift
      description: "Regras para Openshift"
      vpc_id: "{{ aws_vpc_network }}"
      region: sa-east-1
      rules:
       - proto: tcp
         ports:
          - 22
          - 80
          - 443
          - 8443
         cidr_ip: 0.0.0.0/0
    when: provider == "aws" and create_student_instance == "S"

  - name: Salva dados no grupo de inventario... usuario
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: instances_ips
    with_items: "{{ ec2.instances }}"
    when: provider == "aws" and create_student_instance == "S"

  - name: Grava IP da instancia na variavel ip_publico
    set_fact:
      ip_publico: "{{ item.public_dns_name }}"
    with_items: "{{ ec2.instances }}"
    when: provider == "aws" and create_student_instance == "S"

  - name: Grava IP do server1
    set_fact:
      ip_server1: "{{ item.private_dns_name }}"
    with_items: "{{ aws1.instances }}"
    when: provider == "aws" and create_student_instance == "S"

  - name: Grava IP do server2
    set_fact:
      ip_server2: "{{ item.private_dns_name }}"
    with_items: "{{ aws2.instances }}"
    when: provider == "aws" and create_student_instance == "S"

  - name: Espera por SSH habilitado...
    wait_for:
      delay: 1
      host: "{{ item.public_ip }}"
      port: 22
      state: started
      timeout: 60
    with_items: "{{ ec2.instances }}"
    when: provider == "aws" and create_student_instance == "S"

  - name: "Seta variaveis para proximos passos, incluindo o endereco {{ ip_publico }}"
    set_fact:
      chave_ssh: "{{ chave_ssh }}"
      usuario_ssh_aws: "{{ usuario_ssh_aws }}"
      private_ip: "{{ item.private_ip }}"
      public_ip: "{{ item.public_ip }}"
      public_dns: "{{ item.public_dns_name }}"
    with_items: "{{ ec2.instances }}"
    when: provider == "aws" and create_student_instance == "S"


# ========================================
# FIM AWS
# ========================================



  - name: Login no cluster Openshift
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc login {{ cluster_openshift }} --token={{ token_openshift }} --insecure-skip-tls-verify"

  - name: Escolhe projeto
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc project {{ nome_projeto_openshift }}"

  - name: Cria deployment Wetty aluno
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc new-app lasher/wetty-single-new openshift={{ ip_publico }} sshuser={{ usuario_ssh }} --name=wetty-{{ user }} -n {{ nome_projeto_openshift }}"
  
  - name: Pausa gatilho DC
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc rollout pause dc wetty-{{ user }} -n {{ nome_projeto_openshift }}"

  - name: Seta limites para wetty do aluno
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc set resources dc wetty-{{ user }} --limits=memory=50Mi -n {{ nome_projeto_openshift }} || echo 'Ja existe'"

  - name: Cria deployment Wetty aluno
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc rollout resume dc wetty-{{ user }} -n {{ nome_projeto_openshift }} || echo 'Ja existe'"

  - name: Cria rota para acesso ao wetty-aluno
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc expose svc/wetty-{{ user }} -n {{ nome_projeto_openshift }} || echo 'Ja existe'"

  - name: Obtem nome da rota wetty
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc get route wetty-{{ user }} --no-headers -n {{ nome_projeto_openshift }} | awk '{print $2}'"
    register: result_url_wetty

  - name: Cria deployment web_workshop
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc new-app SERVER1={{ ip_server1 }} SERVER2={{ ip_server2 }} LINK_FORM_FEEDBACK={{ link_form_feedback }} TOWER={{ endereco_tower }} IP_CLUSTER_OCP={{ cluster_openshift }} NOME_WORKSHOP={{ nome_workshop  }} ALUNO={{ user }} IP_INSTANCIA={{ ip_publico }} URL_WETTY=http://{{ result_url_wetty.stdout }} php~https://github.com/redhat-sa-brazil/workshop-onboarding-apps --context-dir=Workshop-PHP-Student/src --name=web-{{ user }} || echo 'Ja existe'"

  - name: Cria rota para acesso ao web-workshop...
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc expose svc/web-{{ user }} || echo 'Ja existe'"

  - name: Obtem nome da rota
    shell: "export KUBECONFIG=/tmp/kube.cfg; /usr/local/bin/oc get route web-{{ user }} --no-headers -n {{ nome_projeto_openshift }} | awk '{print $2}'"
    register: result_dominio_web_workshop

  - name: Cria usuario no tower
    tower_user:
      username: "{{ user }}"
      password: "redhat"
      email: "{{ email_aluno }}"
      first_name: "{{ user }}"
      last_name: "Workshop"
      state: present
      tower_host: "{{ endereco_tower }}"
      tower_username: "admin"
      tower_password: "redhat4ever"
      tower_verify_ssl: no
    ignore_errors: yes

#  - name: Envia email com dados para acesso
#    mail:
#      host: smtp.gmail.com
#      port: 587
#      username: "{{ email_remetente }}"
#      password: "{{ senha_email }}"
#      to: "<{{ email_aluno }}>"
#      subject: "Dados para Workshop {{ nome_workshop }}"
#      body: 'Seu ambiente de Workshop esta disponivel em {{ result_dominio_web_workshop.stdout }}'
#    delegate_to: localhost

  - name:
    set_fact:
     url_estudante: "{{ result_dominio_web_workshop.stdout }}"

  - name: Gera email html do aluno
    template:
     src: /var/www/html/template_email_estudante.html
     dest: "/tmp/email_{{ user }}.html"

  - name: Envia email com dados para acesso
    mail:
      host: smtp.gmail.com
      port: 587
      username: "{{ email_remetente }}"
      password: "{{ senha_email }}"
      to: "<{{ email_aluno }}>"
      subject: "Dados para Workshop {{ nome_workshop }}"
      subtype: html
      body: "{{ lookup('file', '/tmp/email_{{ user }}.html') }}"
    delegate_to: localhost

- name: "Configura Hosts seguindo roles... {{ hostvars['localhost']['chave_ssh'] }} "
  vars:
   ansible_ssh_private_key_file: "/etc/ansible/workshop-stuff/workshop_id_rsa"
  hosts: instances_ips
  become: yes
  become_method: sudo
  remote_user: "{{ hostvars['localhost']['usuario_ssh'] }}"
  roles:
    - postinstall-ansible

